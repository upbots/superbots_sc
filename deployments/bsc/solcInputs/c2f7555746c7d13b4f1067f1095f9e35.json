{
  "language": "Solidity",
  "sources": {
    "contracts/interfaces/iparaswap.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.10;\r\npragma experimental ABIEncoderV2;\r\n\r\nimport \"./lib/utils.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n\r\ninterface IParaswap {\r\n    event Swapped(\r\n        bytes16 uuid,\r\n        address initiator,\r\n        address indexed beneficiary,\r\n        address indexed srcToken,\r\n        address indexed destToken,\r\n        uint256 srcAmount,\r\n        uint256 receivedAmount,\r\n        uint256 expectedAmount\r\n    );\r\n\r\n    event Bought(\r\n        bytes16 uuid,\r\n        address initiator,\r\n        address indexed beneficiary,\r\n        address indexed srcToken,\r\n        address indexed destToken,\r\n        uint256 srcAmount,\r\n        uint256 receivedAmount\r\n    );\r\n\r\n    event FeeTaken(\r\n        uint256 fee,\r\n        uint256 partnerShare,\r\n        uint256 paraswapShare\r\n    );\r\n\r\n    function multiSwap(\r\n        Utils.SellData calldata data\r\n    )\r\n        external\r\n        payable\r\n        returns (uint256);\r\n\r\n    function megaSwap(\r\n        Utils.MegaSwapSellData calldata data\r\n    )\r\n        external\r\n        payable\r\n        returns (uint256);\r\n\r\n    function protectedMultiSwap(\r\n        Utils.SellData calldata data\r\n    )\r\n        external\r\n        payable\r\n        returns (uint256);\r\n\r\n    function protectedMegaSwap(\r\n        Utils.MegaSwapSellData calldata data\r\n    )\r\n        external\r\n        payable\r\n        returns (uint256);\r\n\r\n    function protectedSimpleSwap(\r\n        Utils.SimpleData calldata data\r\n    )\r\n        external\r\n        payable\r\n        returns (uint256 receivedAmount);\r\n\r\n    function protectedSimpleBuy(\r\n        Utils.SimpleData calldata data\r\n    )\r\n        external\r\n        payable;\r\n\r\n    function simpleSwap(\r\n        Utils.SimpleData calldata data\r\n    )\r\n        external\r\n        payable\r\n        returns (uint256 receivedAmount);\r\n\r\n    function simpleBuy(\r\n        Utils.SimpleData calldata data\r\n    )\r\n        external\r\n        payable;\r\n\r\n    function swapOnUniswap(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path\r\n    )\r\n        external\r\n        payable;\r\n\r\n    function swapOnUniswapFork(\r\n        address factory,\r\n        bytes32 initCode,\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path\r\n    )\r\n        external\r\n        payable;\r\n\r\n    function buyOnUniswap(\r\n        uint256 amountInMax,\r\n        uint256 amountOut,\r\n        address[] calldata path\r\n    )\r\n        external\r\n        payable;\r\n\r\n    function buyOnUniswapFork(\r\n        address factory,\r\n        bytes32 initCode,\r\n        uint256 amountInMax,\r\n        uint256 amountOut,\r\n        address[] calldata path\r\n    )\r\n        external\r\n        payable;\r\n\r\n    function swapOnUniswapV2Fork(\r\n        address tokenIn,\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address weth,\r\n        uint256[] calldata pools\r\n    )\r\n        external\r\n        payable;\r\n\r\n    function buyOnUniswapV2Fork(\r\n        address tokenIn,\r\n        uint256 amountInMax,\r\n        uint256 amountOut,\r\n        address weth,\r\n        uint256[] calldata pools\r\n    )\r\n        external\r\n        payable;\r\n\r\n    function swapOnZeroXv2(\r\n        IERC20 fromToken,\r\n        IERC20 toToken,\r\n        uint256 fromAmount,\r\n        uint256 amountOutMin,\r\n        address exchange,\r\n        bytes calldata payload\r\n    )\r\n    external\r\n    payable;\r\n\r\n    function swapOnZeroXv4(\r\n        IERC20 fromToken,\r\n        IERC20 toToken,\r\n        uint256 fromAmount,\r\n        uint256 amountOutMin,\r\n        address exchange,\r\n        bytes calldata payload\r\n    )\r\n    external\r\n    payable;\r\n}"
    },
    "contracts/interfaces/lib/utils.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.10;\r\n\r\nlibrary Utils {\r\n    /**\r\n   * @param fromToken Address of the source token\r\n   * @param fromAmount Amount of source tokens to be swapped\r\n   * @param toAmount Minimum destination token amount expected out of this swap\r\n   * @param expectedAmount Expected amount of destination tokens without slippage\r\n   * @param beneficiary Beneficiary address\r\n   * 0 then 100% will be transferred to beneficiary. Pass 10000 for 100%\r\n   * @param path Route to be taken for this swap to take place\r\n\r\n   */\r\n    struct SellData {\r\n        address fromToken;\r\n        uint256 fromAmount;\r\n        uint256 toAmount;\r\n        uint256 expectedAmount;\r\n        address payable beneficiary;\r\n        Utils.Path[] path;\r\n        address payable partner;\r\n        uint256 feePercent;\r\n        bytes permit;\r\n        uint256 deadline;\r\n        bytes16 uuid;\r\n    }\r\n\r\n    struct MegaSwapSellData {\r\n        address fromToken;\r\n        uint256 fromAmount;\r\n        uint256 toAmount;\r\n        uint256 expectedAmount;\r\n        address payable beneficiary;\r\n        Utils.MegaSwapPath[] path;\r\n        address payable partner;\r\n        uint256 feePercent;\r\n        bytes permit;\r\n        uint256 deadline;\r\n        bytes16 uuid;\r\n    }\r\n\r\n    struct SimpleData {\r\n        address fromToken;\r\n        address toToken;\r\n        uint256 fromAmount;\r\n        uint256 toAmount;\r\n        uint256 expectedAmount;\r\n        address[] callees;\r\n        bytes exchangeData;\r\n        uint256[] startIndexes;\r\n        uint256[] values;\r\n        address payable beneficiary;\r\n        address payable partner;\r\n        uint256 feePercent;\r\n        bytes permit;\r\n        uint256 deadline;\r\n        bytes16 uuid;\r\n    }\r\n\r\n    struct Adapter {\r\n        address payable adapter;\r\n        uint256 percent;\r\n        uint256 networkFee;\r\n        Route[] route;\r\n    }\r\n\r\n    struct Route {\r\n        uint256 index;//Adapter at which index needs to be used\r\n        address targetExchange;\r\n        uint percent;\r\n        bytes payload;\r\n        uint256 networkFee;//Network fee is associated with 0xv3 trades\r\n    }\r\n\r\n    struct MegaSwapPath {\r\n        uint256 fromAmountPercent;\r\n        Path[] path;\r\n    }\r\n\r\n    struct Path {\r\n        address to;\r\n        uint256 totalNetworkFee;//Network fee is associated with 0xv3 trades\r\n        Adapter[] adapters;\r\n    }\r\n}"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "contracts/vault.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.10;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\n\r\nimport \"./interfaces/uniswapv2.sol\";\r\nimport \"./interfaces/iparaswap.sol\";\r\n\r\ncontract Vault is ERC20 {\r\n    address public strategist;\r\n    mapping(address => bool) public whiteList;\r\n\r\n    address public quoteToken;\r\n    address public baseToken;\r\n\r\n    uint256 public maxCap = 0;\r\n    uint256 public position = 0; // 0: closed, 1: opened\r\n    uint256 public soldAmount = 0;\r\n    uint256 public profit = percentMax;\r\n\r\n    address public constant pancakeRouter = 0x10ED43C718714eb63d5aA57B78B54704E256024E; // mainnet v2\r\n\r\n    address public constant wbnb = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c; // mainnet\r\n\r\n    address public constant ubxt = 0xBbEB90cFb6FAFa1F69AA130B7341089AbeEF5811; // mainnet\r\n    \r\n    uint16 public percentDev = 500;\r\n    uint16 public percentUpbotsFee = 10;\r\n    uint16 public percentBurn = 350;\r\n    uint16 public percentStakers = 350;\r\n    uint16 public constant percentMax = 10000;\r\n\r\n    address[] private pathBackward;\r\n\r\n    address public company;\r\n    address public stakers;\r\n    address public algoDev;\r\n\r\n    uint256 public constant SWAP_MIN = 10 ** 6;\r\n\r\n    string public vaultName;\r\n\r\n    // paraswap\r\n    address public paraswapCallAddr;\r\n    \r\n    // 1inch\r\n    address public oneinchCallAddr;\r\n\r\n    event Received(address, uint);\r\n    event ParameterUpdated(address, address, address, uint16, uint16, uint16, uint16, uint256);\r\n\r\n    receive() external payable {\r\n        emit Received(msg.sender, msg.value);\r\n    }\r\n    \r\n    constructor(\r\n        string memory _name, \r\n        address _quoteToken, \r\n        address _baseToken, \r\n        address _strategist, \r\n        uint16 _percentDev, \r\n        address _company, \r\n        address _stakers, \r\n        address _algoDev,\r\n        uint256 _maxCap\r\n    )\r\n        ERC20(\r\n            string(abi.encodePacked(\"xUBXT_\", _name)), \r\n            string(abi.encodePacked(\"xUBXT_\", _name))\r\n        )\r\n    {\r\n        require(_quoteToken != address(0), \"Please provide valid address\");\r\n        require(_baseToken != address(0), \"Please provide valid address\");\r\n        require(_strategist != address(0), \"Please provide valid address\");\r\n        require(_company != address(0), \"Please provide valid address\");\r\n        require(_stakers != address(0), \"Please provide valid address\");\r\n        require(_algoDev != address(0), \"Please provide valid address\");\r\n\r\n        vaultName = _name;\r\n        company = _company;\r\n        stakers = _stakers;\r\n        algoDev = _algoDev;\r\n        maxCap = _maxCap;\r\n\r\n        strategist = _strategist;\r\n        whiteList[_strategist] = true;\r\n\r\n        quoteToken = _quoteToken;\r\n        baseToken = _baseToken;\r\n\r\n        percentDev = _percentDev;\r\n\r\n        pathBackward = new address[](2);\r\n        pathBackward[0] = baseToken;\r\n        pathBackward[1] = quoteToken;\r\n\r\n        paraswapCallAddr = 0xDEF171Fe48CF0115B1d80b88dc8eAB59176FEe57;\r\n        oneinchCallAddr = 0x1111111254fb6c44bAC0beD2854e76F90643097d;\r\n    }\r\n\r\n    function setParameters(\r\n        uint16 _percentDev, \r\n        uint16 _percentUpbotsFee, \r\n        uint16 _percentBurn,\r\n        uint16 _percentStakers,\r\n        address _company, \r\n        address _stakers, \r\n        address _algoDev,\r\n        uint256 _maxCap\r\n    ) public  {\r\n        \r\n        require(_company != address(0), \"Please provide valid address\");\r\n        require(_stakers != address(0), \"Please provide valid address\");\r\n        require(_algoDev != address(0), \"Please provide valid address\");\r\n        require(msg.sender == strategist, \"Not strategist\");\r\n\r\n        company = _company;\r\n        stakers = _stakers;\r\n        algoDev = _algoDev;\r\n        percentDev = _percentDev;\r\n        percentUpbotsFee = _percentUpbotsFee;\r\n        percentBurn = _percentBurn;\r\n        percentStakers = _percentStakers;\r\n        maxCap = _maxCap;\r\n\r\n        emit ParameterUpdated(company, stakers, algoDev, percentDev, percentUpbotsFee, percentBurn, percentStakers, maxCap);\r\n    }\r\n\r\n    // Send remanining BNB (used for paraswap integration) to other wallet\r\n    function fundTransfer(address receiver, uint256 amount) public {\r\n        \r\n        require(msg.sender == strategist, \"Not strategist\");\r\n        require(receiver != address(0), \"Please provide valid address\");\r\n\r\n        payable(receiver).transfer(amount);\r\n    }\r\n\r\n    function approveTokensForParaswap(address paraswap, uint256 amount) public {\r\n\r\n        require(msg.sender == strategist, \"Not strategist\");\r\n        require(paraswap != address(0), \"Please provide valid address\");\r\n        IERC20(quoteToken).approve(paraswap, amount);\r\n        IERC20(baseToken).approve(paraswap, amount);\r\n    }\r\n\r\n    function approveTokensForOneinch(address oneinch, uint256 amount) public {\r\n\r\n        require(msg.sender == strategist, \"Not strategist\");\r\n        require(oneinch != address(0), \"Please provide valid address\");\r\n        IERC20(quoteToken).approve(oneinch, amount);\r\n        IERC20(baseToken).approve(oneinch, amount);\r\n    }\r\n\r\n    function poolSize() public view returns (uint256) {\r\n        return\r\n            (IERC20(quoteToken).balanceOf(address(this)) + _calculateQuoteFromBase());\r\n    }\r\n\r\n    function depositQuote(uint256 amount) public {\r\n\r\n        // 1. Check max cap\r\n        uint256 _pool = poolSize();\r\n        require (maxCap == 0 || _pool + amount < maxCap, \"The vault reached the max cap\");\r\n\r\n        // 2. transfer quote from sender to this vault\r\n        uint256 _before = IERC20(quoteToken).balanceOf(address(this));\r\n        IERC20(quoteToken).transferFrom(msg.sender, address(this), amount);\r\n        uint256 _after = IERC20(quoteToken).balanceOf(address(this));\r\n        amount = _after - _before; // Additional check for deflationary tokens\r\n\r\n        // 3. swap Quote to Base if position is opened\r\n        if (position == 1) {\r\n            soldAmount = soldAmount + amount;\r\n\r\n            _before = IERC20(baseToken).balanceOf(address(this));\r\n            _swapPancakeswap(quoteToken, baseToken, amount);\r\n            _after = IERC20(baseToken).balanceOf(address(this));\r\n            amount = _after - _before;\r\n\r\n            _pool = _before;\r\n        }\r\n\r\n        // 4. calculate share and send back xUBXT\r\n        uint256 shares = 0;\r\n        if (totalSupply() == 0) {\r\n            shares = amount;\r\n        }\r\n        else {\r\n            shares = amount * totalSupply() / _pool;\r\n        }\r\n        _mint(msg.sender, shares);\r\n    }\r\n\r\n    function depositBase(uint256 amount) public {\r\n\r\n        // 1. Check max cap\r\n        uint256 _pool = poolSize();\r\n        uint256[] memory amounts = UniswapRouterV2(pancakeRouter).getAmountsOut(amount, pathBackward);\r\n        uint256 expectedQuote = amounts[amounts.length - 1];\r\n        require (maxCap == 0 || _pool + expectedQuote < maxCap, \"The vault reached the max cap\");\r\n\r\n        // 2. transfer base from sender to this vault\r\n        uint256 _before = IERC20(baseToken).balanceOf(address(this));\r\n        IERC20(baseToken).transferFrom(msg.sender, address(this), amount);\r\n        uint256 _after = IERC20(baseToken).balanceOf(address(this));\r\n        amount = _after - _before; // Additional check for deflationary tokens\r\n\r\n        _pool = _before;\r\n\r\n        // 3. swap Base to Quote if position is closed\r\n        if (position == 0) {\r\n            _before = IERC20(quoteToken).balanceOf(address(this));\r\n            _swapPancakeswap(baseToken, quoteToken, amount);\r\n            _after = IERC20(quoteToken).balanceOf(address(this));\r\n            amount = _after - _before;\r\n\r\n            _pool = _before;\r\n        }\r\n\r\n        // update soldAmount if position is opened\r\n        if (position == 1) {\r\n            // soldAmount = soldAmount + amounts[2];\r\n            soldAmount = soldAmount + expectedQuote;\r\n        }\r\n\r\n        // 4. calculate share and send back xUBXT\r\n        uint256 shares = 0;\r\n        if (totalSupply() == 0) {\r\n            shares = amount;\r\n        } else {\r\n            shares = amount * totalSupply() / _pool;\r\n        }\r\n        _mint(msg.sender, shares);\r\n    }\r\n\r\n    function withdraw(uint256 shares) public  {\r\n\r\n        require (shares <= balanceOf(msg.sender), \"invalid share amount\");\r\n\r\n        if (position == 0) {\r\n\r\n            uint256 amountQuote = IERC20(quoteToken).balanceOf(address(this)) * shares / totalSupply();\r\n            if (amountQuote > 0) {\r\n                IERC20(quoteToken).transfer(msg.sender, amountQuote);\r\n            }\r\n        }\r\n\r\n        if (position == 1) {\r\n\r\n            uint256 amountBase = IERC20(baseToken).balanceOf(address(this)) * shares / totalSupply();\r\n            uint256[] memory amounts = UniswapRouterV2(pancakeRouter).getAmountsOut(amountBase, pathBackward);\r\n            \r\n            uint256 thisSoldAmount = soldAmount * shares / totalSupply();\r\n            uint256 _profit = profit * amounts[amounts.length - 1] / thisSoldAmount;\r\n            if (_profit > percentMax) {\r\n\r\n                uint256 profitAmount = amountBase * (_profit - percentMax) / _profit;\r\n                uint256 feeAmount = takePerformanceFeesFromBaseToken(profitAmount);\r\n                amountBase = amountBase - feeAmount;\r\n            }\r\n            soldAmount = soldAmount - thisSoldAmount;\r\n            \r\n            if (amountBase > 0) {\r\n                IERC20(baseToken).transfer(msg.sender, amountBase);\r\n            }\r\n        }\r\n\r\n        // burn these shares from the sender wallet\r\n        _burn(msg.sender, shares);\r\n\r\n    }\r\n\r\n    function buy() public {\r\n        // 0. check whitelist\r\n        require(isWhitelisted(msg.sender), \"Not whitelisted\");\r\n\r\n        // 1. Check if the vault is in closed position\r\n        require(position == 0, \"The vault is already in open position\");\r\n\r\n        // 2. get the amount of quoteToken to trade\r\n        uint256 amount = IERC20(quoteToken).balanceOf(address(this));\r\n        require (amount > 0, \"No enough balance to trade\");\r\n\r\n        // 3. takeUpbotsFees\r\n        amount = takeUpbotsFees(quoteToken, amount);\r\n\r\n        // 4. save the remaining to soldAmount\r\n        soldAmount = amount;\r\n\r\n        // 5. swap tokens to B\r\n        _swapPancakeswap(quoteToken, baseToken, amount);\r\n\r\n        // 6. update position\r\n        position = 1;\r\n    }\r\n\r\n    function sell() public {\r\n        // 0. check whitelist\r\n        require(isWhitelisted(msg.sender), \"Not whitelisted\");\r\n\r\n        // 1. check if the vault is in open position\r\n        require(position == 1, \"The vault is in closed position\");\r\n\r\n        // 2. get the amount of baseToken to trade\r\n        uint256 amount = IERC20(baseToken).balanceOf(address(this));\r\n\r\n        if (amount > 0) {\r\n\r\n            // 3. takeUpbotsFee\r\n            amount = takeUpbotsFees(baseToken, amount);\r\n\r\n            // 3. swap tokens to Quote and get the newly create quoteToken\r\n            uint256 _before = IERC20(quoteToken).balanceOf(address(this));\r\n            _swapPancakeswap(baseToken, quoteToken, amount);\r\n            uint256 _after = IERC20(quoteToken).balanceOf(address(this));\r\n            amount = _after - _before;\r\n\r\n            // 4. calculate the profit in percent\r\n            profit = profit * amount / soldAmount;\r\n\r\n            // 5. take performance fees in case of profit\r\n            if (profit > percentMax) {\r\n\r\n                uint256 profitAmount = amount * (profit - percentMax) / profit;\r\n                takePerformanceFees(profitAmount);\r\n                profit = percentMax;\r\n            }\r\n        }\r\n\r\n        // 6. update soldAmount\r\n        soldAmount = 0;\r\n\r\n        // 7. update position\r\n        position = 0;\r\n    }\r\n\r\n    function resetTrade() public {\r\n        \r\n        require(msg.sender == strategist, \"Not strategist\");\r\n\r\n        // 1. swap all baseToken to quoteToken\r\n        uint256 amount = IERC20(baseToken).balanceOf(address(this));\r\n        if (amount > 10**6) {\r\n            _swapPancakeswap(baseToken, quoteToken, amount);\r\n        }\r\n\r\n        // 2. reset profit calculation\r\n        profit = percentMax;\r\n        soldAmount = 0;\r\n\r\n        // 3. reset position\r\n        position = 0;\r\n    }\r\n\r\n    function resetTradeParaswap(bytes memory swapCalldata) public {\r\n        \r\n        require(msg.sender == strategist, \"Not strategist\");\r\n\r\n        // 1. swap all baseToken to quoteToken\r\n        (bool success,) = paraswapCallAddr.call(swapCalldata);\r\n        \r\n        if (!success) {\r\n            // Copy revert reason from call\r\n            assembly {\r\n                returndatacopy(0, 0, returndatasize())\r\n                revert(0, returndatasize())\r\n            }\r\n        }\r\n\r\n        // 2. reset profit calculation\r\n        profit = percentMax;\r\n        soldAmount = 0;\r\n\r\n        // 3. reset position\r\n        position = 0;\r\n    }\r\n\r\n        function resetTradeOneinch(bytes memory swapCalldata) public {\r\n        \r\n        require(msg.sender == strategist, \"Not strategist\");\r\n\r\n        // 1. swap all baseToken to quoteToken\r\n        (bool success,) = oneinchCallAddr.call(swapCalldata);\r\n        \r\n        if (!success) {\r\n            // Copy revert reason from call\r\n            assembly {\r\n                returndatacopy(0, 0, returndatasize())\r\n                revert(0, returndatasize())\r\n            }\r\n        }\r\n\r\n        // 2. reset profit calculation\r\n        profit = percentMax;\r\n        soldAmount = 0;\r\n\r\n        // 3. reset position\r\n        position = 0;\r\n    }\r\n\r\n    function addToWhiteList(address _address) public {\r\n        require(msg.sender == strategist, \"Not strategist\");\r\n        whiteList[_address] = true;\r\n    }\r\n\r\n    function removeFromWhiteList(address _address) public {\r\n        require(msg.sender == strategist, \"Not strategist\");\r\n        whiteList[_address] = false;\r\n    }\r\n    \r\n    function setStrategist(address _address) public {\r\n        \r\n        require(_address != address(0), \"Please provide valid address\");\r\n        require(msg.sender == strategist, \"Not strategist\");\r\n        whiteList[_address] = true;\r\n        strategist = _address;\r\n    }\r\n\r\n    function isWhitelisted(address _address) public view returns(bool) {\r\n        return whiteList[_address];\r\n    }\r\n\r\n    function takeUpbotsFees(address token, uint256 amount) private returns(uint256) {\r\n        \r\n        if (amount == 0) {\r\n            return 0;\r\n        }\r\n\r\n        // calculate fee\r\n        uint256 fee = amount * percentUpbotsFee / percentMax;\r\n\r\n        // swap to UBXT\r\n        uint256 _before = IERC20(ubxt).balanceOf(address(this));\r\n        _swapPancakeswap(token, ubxt, fee);\r\n        uint256 _after = IERC20(ubxt).balanceOf(address(this));\r\n        uint256 ubxtAmt = _after - _before;\r\n\r\n        // transfer to company wallet\r\n        IERC20(ubxt).transfer(company, ubxtAmt);\r\n        \r\n        // return remaining token amount \r\n        return amount - fee;\r\n    }\r\n    \r\n    function takePerformanceFees(uint256 amount) private {\r\n\r\n        if (amount == 0) {\r\n            return ;\r\n        }\r\n\r\n        // calculate fees\r\n        uint256 burnAmount = amount * percentBurn / percentMax;\r\n        uint256 stakersAmount = amount * percentStakers / percentMax;\r\n        uint256 devAmount = amount * percentDev / percentMax;\r\n        \r\n        // swap to UBXT\r\n        uint256 _total = stakersAmount + devAmount + burnAmount;\r\n        uint256 _before = IERC20(ubxt).balanceOf(address(this));\r\n        _swapPancakeswap(quoteToken, ubxt, _total);\r\n        uint256 _after = IERC20(ubxt).balanceOf(address(this));\r\n        uint256 ubxtAmt = _after - _before;\r\n\r\n        // calculate UBXT amounts\r\n        stakersAmount = ubxtAmt * stakersAmount / _total;\r\n        devAmount = ubxtAmt * devAmount / _total;\r\n        burnAmount = ubxtAmt - stakersAmount - devAmount;\r\n\r\n        // Transfer\r\n        IERC20(ubxt).transfer(\r\n            address(0), // burn\r\n            burnAmount\r\n        );\r\n        \r\n        IERC20(ubxt).transfer(\r\n            stakers,\r\n            stakersAmount\r\n        );\r\n\r\n        IERC20(ubxt).transfer(\r\n            algoDev,\r\n            devAmount\r\n        );\r\n    }\r\n\r\n    function takePerformanceFeesFromBaseToken(uint256 amount) private returns(uint256) {\r\n\r\n        if (amount == 0) {\r\n            return 0;\r\n        }\r\n\r\n        // calculate fees\r\n        uint256 burnAmount = amount * percentBurn / percentMax;\r\n        uint256 stakersAmount = amount * percentStakers / percentMax;\r\n        uint256 devAmount = amount * percentDev / percentMax;\r\n        \r\n        // swap to UBXT\r\n        uint256 _total = stakersAmount + devAmount + burnAmount;\r\n        uint256 _before = IERC20(ubxt).balanceOf(address(this));\r\n        uint256 _tokenbBefore = IERC20(baseToken).balanceOf(address(this));\r\n        _swapPancakeswap(baseToken, ubxt, _total);\r\n        uint256 _after = IERC20(ubxt).balanceOf(address(this));\r\n        uint256 _tokenbAfter = IERC20(baseToken).balanceOf(address(this));\r\n        \r\n        uint256 ubxtAmt = _after - _before;\r\n        uint256 feeAmount = _tokenbBefore - _tokenbAfter;\r\n\r\n        // calculate UBXT amounts\r\n        stakersAmount = ubxtAmt * stakersAmount / _total;\r\n        devAmount = ubxtAmt * devAmount / _total;\r\n        burnAmount = ubxtAmt - stakersAmount - devAmount;\r\n\r\n        // Transfer\r\n        IERC20(ubxt).transfer(\r\n            address(0), // burn\r\n            burnAmount\r\n        );\r\n        \r\n        IERC20(ubxt).transfer(\r\n            stakers,\r\n            stakersAmount\r\n        );\r\n\r\n        IERC20(ubxt).transfer(\r\n            algoDev,\r\n            devAmount\r\n        );\r\n\r\n        return feeAmount;\r\n    }\r\n\r\n    // *** internal functions ***\r\n\r\n    function _calculateQuoteFromBase() internal view returns(uint256) {\r\n        \r\n        uint256 amountBase = IERC20(baseToken).balanceOf(address(this));\r\n\r\n        if (amountBase < SWAP_MIN) {\r\n            return 0;\r\n        }\r\n        uint256[] memory amounts = UniswapRouterV2(pancakeRouter).getAmountsOut(amountBase, pathBackward);\r\n        return amounts[amounts.length - 1];\r\n    }\r\n    \r\n    function _swapPancakeswap(\r\n        address _from,\r\n        address _to,\r\n        uint256 _amount\r\n    ) internal {\r\n        require(_to != address(0));\r\n\r\n        // Swap with uniswap\r\n        IERC20(_from).approve(pancakeRouter, 0);\r\n        IERC20(_from).approve(pancakeRouter, _amount);\r\n\r\n        address[] memory path;\r\n\r\n        path = new address[](2);\r\n        path[0] = _from;\r\n        path[1] = _to;\r\n\r\n        uint256[] memory amounts = UniswapRouterV2(pancakeRouter).swapExactTokensForTokens(\r\n            _amount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp + 60\r\n        );\r\n\r\n        require(amounts[0] > 0, \"There was problem in pancakeswap\");\r\n    }\r\n\r\n    function buyParaswap(bytes memory swapCalldata) public {\r\n        \r\n        require(paraswapCallAddr != address(0), \"Please provide valid address\");\r\n\r\n        // 0. check whitelist\r\n        require(isWhitelisted(msg.sender), \"Not whitelisted\");\r\n\r\n        // 1. Check if the vault is in closed position\r\n        require(position == 0, \"The vault is already in open position\");\r\n\r\n        // 2. get the amount of quoteToken to trade\r\n        uint256 amount = IERC20(quoteToken).balanceOf(address(this));\r\n        require (amount > 0, \"No enough balance to trade\");\r\n\r\n        // 3. takeUpbotsFees\r\n        amount = takeUpbotsFees(quoteToken, amount);\r\n\r\n        // 4. save the remaining to soldAmount\r\n        soldAmount = amount;\r\n\r\n        // 5. swap tokens to B\r\n        (bool success,) = paraswapCallAddr.call(swapCalldata);\r\n        \r\n        if (!success) {\r\n            // Copy revert reason from call\r\n            assembly {\r\n                returndatacopy(0, 0, returndatasize())\r\n                revert(0, returndatasize())\r\n            }\r\n        }\r\n\r\n        // 6. update position\r\n        position = 1;\r\n    }\r\n\r\n    function sellParaswap(bytes memory swapCalldata) public {\r\n        \r\n        require(paraswapCallAddr != address(0), \"Please provide valid address\");\r\n\r\n        // 0. check whitelist\r\n        require(isWhitelisted(msg.sender), \"Not whitelisted\");\r\n\r\n        // 1. check if the vault is in open position\r\n        require(position == 1, \"The vault is in closed position\");\r\n\r\n        // 2. get the amount of baseToken to trade\r\n        uint256 amount = IERC20(baseToken).balanceOf(address(this));\r\n\r\n        if (amount > 0) {\r\n\r\n            // 3. takeUpbotsFee\r\n            amount = takeUpbotsFees(baseToken, amount);\r\n\r\n            // 3. swap tokens to Quote and get the newly create quoteToken\r\n            uint256 _before = IERC20(quoteToken).balanceOf(address(this));\r\n            (bool success,) = paraswapCallAddr.call(swapCalldata);\r\n            \r\n            if (!success) {\r\n                // Copy revert reason from call\r\n                assembly {\r\n                    returndatacopy(0, 0, returndatasize())\r\n                    revert(0, returndatasize())\r\n                }\r\n            }\r\n            uint256 _after = IERC20(quoteToken).balanceOf(address(this));\r\n            amount = _after - _before;\r\n\r\n            // 4. calculate the profit in percent\r\n            profit = profit * amount / soldAmount;\r\n\r\n            // 5. take performance fees in case of profit\r\n            if (profit > percentMax) {\r\n\r\n                uint256 profitAmount = amount * (profit - percentMax) / profit;\r\n                takePerformanceFees(profitAmount);\r\n                profit = percentMax;\r\n            }\r\n        }\r\n\r\n        // 6. update soldAmount\r\n        soldAmount = 0;\r\n\r\n        // 7. update position\r\n        position = 0;\r\n    }\r\n\r\n    function buyOneinch(bytes memory swapCalldata) public {\r\n        \r\n        require(oneinchCallAddr != address(0), \"Please provide valid address\");\r\n\r\n        // 0. check whitelist\r\n        require(isWhitelisted(msg.sender), \"Not whitelisted\");\r\n\r\n        // 1. Check if the vault is in closed position\r\n        require(position == 0, \"The vault is already in open position\");\r\n\r\n        // 2. get the amount of quoteToken to trade\r\n        uint256 amount = IERC20(quoteToken).balanceOf(address(this));\r\n        require (amount > 0, \"No enough balance to trade\");\r\n\r\n        // 3. takeUpbotsFees\r\n        amount = takeUpbotsFees(quoteToken, amount);\r\n\r\n        // 4. save the remaining to soldAmount\r\n        soldAmount = amount;\r\n\r\n        // 5. swap tokens to B\r\n        (bool success,) = oneinchCallAddr.call(swapCalldata);\r\n        \r\n        if (!success) {\r\n            // Copy revert reason from call\r\n            assembly {\r\n                returndatacopy(0, 0, returndatasize())\r\n                revert(0, returndatasize())\r\n            }\r\n        }\r\n\r\n        // 6. update position\r\n        position = 1;\r\n    }\r\n\r\n    function sellOneinch(bytes memory swapCalldata) public {\r\n        \r\n        require(oneinchCallAddr != address(0), \"Please provide valid address\");\r\n\r\n        // 0. check whitelist\r\n        require(isWhitelisted(msg.sender), \"Not whitelisted\");\r\n\r\n        // 1. check if the vault is in open position\r\n        require(position == 1, \"The vault is in closed position\");\r\n\r\n        // 2. get the amount of baseToken to trade\r\n        uint256 amount = IERC20(baseToken).balanceOf(address(this));\r\n\r\n        if (amount > 0) {\r\n\r\n            // 3. takeUpbotsFee\r\n            amount = takeUpbotsFees(baseToken, amount);\r\n\r\n            // 3. swap tokens to Quote and get the newly create quoteToken\r\n            uint256 _before = IERC20(quoteToken).balanceOf(address(this));\r\n            (bool success,) = oneinchCallAddr.call(swapCalldata);\r\n            \r\n            if (!success) {\r\n                // Copy revert reason from call\r\n                assembly {\r\n                    returndatacopy(0, 0, returndatasize())\r\n                    revert(0, returndatasize())\r\n                }\r\n            }\r\n            uint256 _after = IERC20(quoteToken).balanceOf(address(this));\r\n            amount = _after - _before;\r\n\r\n            // 4. calculate the profit in percent\r\n            profit = profit * amount / soldAmount;\r\n\r\n            // 5. take performance fees in case of profit\r\n            if (profit > percentMax) {\r\n\r\n                uint256 profitAmount = amount * (profit - percentMax) / profit;\r\n                takePerformanceFees(profitAmount);\r\n                profit = percentMax;\r\n            }\r\n        }\r\n\r\n        // 6. update soldAmount\r\n        soldAmount = 0;\r\n\r\n        // 7. update position\r\n        position = 0;\r\n    }\r\n}\r\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n        unchecked {\n            _approve(sender, _msgSender(), currentAllowance - amount);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        uint256 senderBalance = _balances[sender];\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[sender] = senderBalance - amount;\n        }\n        _balances[recipient] += amount;\n\n        emit Transfer(sender, recipient, amount);\n\n        _afterTokenTransfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "contracts/interfaces/uniswapv2.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.10;\r\n\r\ninterface UniswapRouterV2 {\r\n    function swapExactTokensForTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        returns (\r\n            uint256 amountA,\r\n            uint256 amountB,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 amountToken,\r\n            uint256 amountETH,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n\r\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n\r\n    function swapETHForExactTokens(\r\n        uint256 amountOut,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function swapExactETHForTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    function name() external pure returns (string memory);\r\n\r\n    function symbol() external pure returns (string memory);\r\n\r\n    function decimals() external pure returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address owner) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n\r\n    function nonces(address owner) external view returns (uint256);\r\n\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\r\n    event Burn(\r\n        address indexed sender,\r\n        uint256 amount0,\r\n        uint256 amount1,\r\n        address indexed to\r\n    );\r\n    event Swap(\r\n        address indexed sender,\r\n        uint256 amount0In,\r\n        uint256 amount1In,\r\n        uint256 amount0Out,\r\n        uint256 amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\r\n\r\n    function factory() external view returns (address);\r\n\r\n    function token0() external view returns (address);\r\n\r\n    function token1() external view returns (address);\r\n\r\n    function getReserves()\r\n        external\r\n        view\r\n        returns (\r\n            uint112 reserve0,\r\n            uint112 reserve1,\r\n            uint32 blockTimestampLast\r\n        );\r\n\r\n    function price0CumulativeLast() external view returns (uint256);\r\n\r\n    function price1CumulativeLast() external view returns (uint256);\r\n\r\n    function kLast() external view returns (uint256);\r\n\r\n    function mint(address to) external returns (uint256 liquidity);\r\n\r\n    function burn(address to)\r\n        external\r\n        returns (uint256 amount0, uint256 amount1);\r\n\r\n    function swap(\r\n        uint256 amount0Out,\r\n        uint256 amount1Out,\r\n        address to,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    function skim(address to) external;\r\n\r\n    function sync() external;\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(\r\n        address indexed token0,\r\n        address indexed token1,\r\n        address pair,\r\n        uint256\r\n    );\r\n\r\n    function getPair(address tokenA, address tokenB)\r\n        external\r\n        view\r\n        returns (address pair);\r\n\r\n    function allPairs(uint256) external view returns (address pair);\r\n\r\n    function allPairsLength() external view returns (uint256);\r\n\r\n    function feeTo() external view returns (address);\r\n\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function createPair(address tokenA, address tokenB)\r\n        external\r\n        returns (address pair);\r\n}\r\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/master_vault.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.10;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\n\r\nimport \"./interfaces/uniswapv2.sol\";\r\nimport \"./interfaces/ivault.sol\";\r\n\r\ncontract MasterSuperVault is ERC20, Ownable {\r\n    mapping(address => bool) public whiteList;\r\n\r\n    address public capitalToken;\r\n\r\n    uint256 public maxCap = 0;\r\n    \r\n    address public constant pancakeRouter = 0x10ED43C718714eb63d5aA57B78B54704E256024E; // mainnet v2\r\n\r\n    address public constant wbnb = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c; // mainnet\r\n\r\n    address public constant ubxt = 0xBbEB90cFb6FAFa1F69AA130B7341089AbeEF5811; // mainnet\r\n\r\n    uint public constant VAULT_COUNT = 5;\r\n\r\n    address [] public vaults;\r\n\r\n    string public vaultName;\r\n\r\n    event Received(address, uint);\r\n    event ParameterUpdated(uint256);\r\n\r\n    receive() external payable {\r\n        emit Received(msg.sender, msg.value);\r\n    }\r\n    \r\n    constructor(\r\n        string memory _name, \r\n        address _capitalToken,\r\n        uint256 _maxCap\r\n    )\r\n        ERC20(\r\n            string(abi.encodePacked(\"xUBXT_\", _name)), \r\n            string(abi.encodePacked(\"xUBXT_\", _name))\r\n        )\r\n    {\r\n        require(_capitalToken != address(0));\r\n\r\n        capitalToken = _capitalToken;\r\n        vaultName = _name;\r\n        maxCap = _maxCap;\r\n\r\n        whiteList[msg.sender] = true;\r\n    }\r\n\r\n    function setParameters(\r\n        uint256 _maxCap\r\n    ) public onlyOwner {\r\n        \r\n        maxCap = _maxCap;\r\n\r\n        emit ParameterUpdated(maxCap);\r\n    }\r\n\r\n    // Send remanining BNB (used for paraswap integration) to other wallet\r\n    function fundTransfer(address receiver, uint256 amount) public onlyOwner {\r\n        \r\n        require(receiver != address(0));\r\n\r\n        payable(receiver).transfer(amount);\r\n    }\r\n\r\n    function poolSize() public view returns (uint256) {\r\n\r\n        if (vaults.length < VAULT_COUNT) return 0;\r\n\r\n        uint256[] memory amounts;\r\n        address[] memory path = new address[](3);    \r\n        path[1] = wbnb;\r\n        path[2] = capitalToken;    \r\n\r\n        uint256 _poolSize = 0;\r\n\r\n        for (uint i = 0; i < VAULT_COUNT; i++) {\r\n            uint256 shares = IERC20(vaults[i]).balanceOf(msg.sender);\r\n            uint256 subPoolSize = IVault(vaults[i]).poolSize() * shares / IERC20(vaults[i]).totalSupply();\r\n            path[0] = IVault(vaults[i]).quoteToken();\r\n            amounts = UniswapRouterV2(pancakeRouter).getAmountsOut(subPoolSize, path);\r\n\r\n            _poolSize = _poolSize + amounts[2];\r\n        }\r\n\r\n        return _poolSize;\r\n    }\r\n\r\n    function deposit(uint256 amount) public {\r\n\r\n        require (vaults.length == VAULT_COUNT, \"vaults are not updated yet.\");\r\n\r\n        // 1. Check max cap\r\n        require (maxCap == 0 || totalSupply() + amount < maxCap, \"The vault reached the max cap\");\r\n\r\n        // 2. receive funds\r\n        IERC20(capitalToken).transferFrom(msg.sender, address(this), amount);\r\n        amount = IERC20(capitalToken).balanceOf(address(this));\r\n\r\n        // 3. divide, swap to each quote token and deposit to the vaults\r\n        uint256 subAmount = amount / VAULT_COUNT;\r\n        for (uint i = 0; i < VAULT_COUNT; i++) {\r\n            depositToVault(vaults[i], subAmount);\r\n        }\r\n        \r\n        // 4. mint tokens for shares\r\n        uint256 shares = 0;\r\n        if (totalSupply() == 0) {\r\n            shares = amount;\r\n        }\r\n        else {\r\n            shares = amount * totalSupply() / poolSize();\r\n        }\r\n        _mint(msg.sender, shares);\r\n    }\r\n\r\n    function withdraw(uint256 shares) public  {\r\n\r\n        require (vaults.length == VAULT_COUNT);\r\n        require (shares <= balanceOf(msg.sender), \"invalid share amount\");\r\n\r\n        // 1. iterate vaults, calculate partial shares, withdraw, swap to capital token\r\n        for (uint i = 0; i < VAULT_COUNT; i++) {\r\n            uint subShare = IERC20(vaults[i]).balanceOf(address(this)) * shares / totalSupply();\r\n            withdrawFromVault(vaults[i], subShare);\r\n        }\r\n\r\n        // 2. transfer capital to the user\r\n        if (IERC20(capitalToken).balanceOf(address(this)) > 0) {\r\n            IERC20(capitalToken).transfer(msg.sender, IERC20(capitalToken).balanceOf(address(this)));\r\n        }\r\n\r\n        // 3. burn share tokens\r\n        _burn(msg.sender, shares);\r\n    }\r\n\r\n    function updateVaults(address[] memory _vaults) public {\r\n\r\n        // 1. check array length and zero address\r\n        require (_vaults.length == VAULT_COUNT);\r\n        require (_vaults[0] != address(0));\r\n        require (_vaults[1] != address(0));\r\n        require (_vaults[2] != address(0));\r\n        require (_vaults[3] != address(0));\r\n        require (_vaults[4] != address(0));\r\n\r\n        // 2. Check if this is the initial update\r\n        if (vaults.length < VAULT_COUNT) {\r\n            vaults = _vaults;\r\n            return;\r\n        }\r\n\r\n        // 3. withdraw all funds and swap back to capital token (it could be no quote token in some cases)\r\n        for (uint i = 0; i < VAULT_COUNT; i++) {\r\n            withdrawFromVault(vaults[i], IERC20(vaults[i]).balanceOf(address(this)));\r\n        }\r\n\r\n        // 4. update vaults addresses\r\n        vaults = _vaults;\r\n        \r\n        // 5. divide, swap and deposit funds to each vault\r\n        uint256 amount = IERC20(capitalToken).balanceOf(address(this)) / VAULT_COUNT;\r\n        for (uint i = 0; i < VAULT_COUNT; i++) {\r\n            depositToVault(vaults[i], amount);\r\n        }\r\n    }\r\n\r\n    function addToWhiteList(address _address) public onlyOwner {\r\n        whiteList[_address] = true;\r\n    }\r\n\r\n    function removeFromWhiteList(address _address) public onlyOwner {\r\n        whiteList[_address] = false;\r\n    }\r\n\r\n    function isWhitelisted(address _address) public view returns(bool) {\r\n        return whiteList[_address];\r\n    }\r\n\r\n    // *** internal functions ***\r\n\r\n    function depositToVault(address vault, uint256 amount) internal {\r\n\r\n        require(vault != address(0));\r\n\r\n        if (amount == 0) {\r\n            return;\r\n        }\r\n\r\n        // 1. get quote token of the vault\r\n        address quoteToken = IVault(vault).quoteToken();\r\n\r\n        // 2. swap to quote token\r\n        uint256 _before = IERC20(quoteToken).balanceOf(address(this));\r\n        _swapPancakeswap(capitalToken, quoteToken, amount);\r\n        uint256 _after = IERC20(quoteToken).balanceOf(address(this));\r\n        amount = _after - _before;\r\n\r\n        // 3. deposit\r\n        IERC20(quoteToken).approve(vault, amount);\r\n        IVault(vault).depositQuote(amount);\r\n    }\r\n\r\n    function withdrawFromVault(address vault, uint256 shares) internal {\r\n\r\n        require(vault != address(0));\r\n\r\n        if (shares == 0) {\r\n            return;\r\n        }\r\n\r\n        // 1. get withdraw token (position: 0 => quote token, 1 => base token)\r\n        \r\n        address withdrawToken;\r\n        if (IVault(vault).position() == 0 ) {\r\n            withdrawToken = IVault(vault).quoteToken();\r\n        }\r\n        else {\r\n            withdrawToken = IVault(vault).baseToken();\r\n        }\r\n\r\n        // 2. withdraw from vault\r\n        uint256 _before = IERC20(withdrawToken).balanceOf(address(this));\r\n        IVault(vault).withdraw(shares);\r\n        uint256 _after = IERC20(withdrawToken).balanceOf(address(this));\r\n        uint256 amount = _after - _before;\r\n\r\n        // 3. swap to capital token\r\n        if (amount > 0) {\r\n            _swapPancakeswap(withdrawToken, capitalToken, amount);\r\n        }\r\n    }\r\n\r\n    function _swapPancakeswap(\r\n        address _from,\r\n        address _to,\r\n        uint256 _amount\r\n    ) internal {\r\n        require(_to != address(0));\r\n\r\n        // Swap with uniswap\r\n        IERC20(_from).approve(pancakeRouter, 0);\r\n        IERC20(_from).approve(pancakeRouter, _amount);\r\n\r\n        address[] memory path;\r\n\r\n        path = new address[](2);\r\n        path[0] = _from;\r\n        path[1] = _to;\r\n\r\n        uint256[] memory amounts = UniswapRouterV2(pancakeRouter).swapExactTokensForTokens(\r\n            _amount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp + 60\r\n        );\r\n\r\n        require(amounts[0] > 0);\r\n    }\r\n\r\n}\r\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _setOwner(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _setOwner(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _setOwner(newOwner);\n    }\n\n    function _setOwner(address newOwner) private {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "contracts/interfaces/ivault.sol": {
      "content": "\r\npragma solidity 0.8.10;\r\n\r\ninterface IVault {\r\n    \r\n    function poolSize() external view returns (uint256);\r\n    function depositQuote(uint256 amount) external;\r\n    function depositBase(uint256 amount) external;\r\n    function withdraw(uint256 shares) external;\r\n    function quoteToken() external view returns (address);\r\n    function baseToken() external view returns (address);\r\n    function position() external view returns (uint256);\r\n    function balanceOf() external view returns (uint256);\r\n}"
    },
    "contracts/vault_factory.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.10;\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"./vault.sol\";\r\n\r\ncontract VaultFactory is Ownable {\r\n\r\n    uint256 private constant MAX = (10 ** 18) * (10 ** 18);\r\n    uint256 private constant LITTLE_BNB = 10 ** 16; // 0.01 BNB\r\n    \r\n    event Received(address, uint);\r\n    event VaultGenerated(address);\r\n\r\n    receive() external payable {\r\n        emit Received(msg.sender, msg.value);\r\n    }\r\n    \r\n    function generateVault(\r\n        string memory _name, \r\n        address _quoteToken, \r\n        address _baseToken, \r\n        address _strategist, \r\n        uint16 _percentDev, \r\n        address _company, \r\n        address _stakers, \r\n        address _algoDev,\r\n        uint256 _maxCap\r\n    ) public onlyOwner {\r\n\r\n        require(_quoteToken != address(0));\r\n        require(_baseToken != address(0));\r\n        require(_strategist != address(0));\r\n        require(_company != address(0));\r\n        require(_stakers != address(0));\r\n        require(_algoDev != address(0));\r\n        require (address(this).balance > LITTLE_BNB, \"Put some BNB to this smart contract to give to the generated vaults\");\r\n        \r\n        // 1. deploy a new vault\r\n        Vault newVault = new Vault(\r\n            _name, \r\n            _quoteToken, \r\n            _baseToken, \r\n            address(this), \r\n            _percentDev, \r\n            _company, \r\n            _stakers, \r\n            _algoDev, \r\n            _maxCap);\r\n        \r\n        // 2. allow tokens for paraswap token transfer proxy\r\n        newVault.approveTokensForParaswap(0x216B4B4Ba9F3e719726886d34a177484278Bfcae, MAX);\r\n\r\n        // 3. allow tokens for oneinch token transfer proxy\r\n        newVault.approveTokensForOneinch(0x1111111254fb6c44bAC0beD2854e76F90643097d, MAX);\r\n\r\n        // 4. set strategist\r\n        newVault.setStrategist(_strategist);\r\n\r\n        // 5. send some bnb for paraswap call\r\n        payable(newVault).transfer(LITTLE_BNB);\r\n\r\n        // 6. emit event\r\n        emit VaultGenerated(address(newVault));\r\n    }\r\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}